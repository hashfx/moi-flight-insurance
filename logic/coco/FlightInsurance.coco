coco FlightInsurance

state persistent:
    // Internal Token state variables
    name String
    symbol String
    decimals U256
    totalSupply U256
    balanceOf Map[Address]U256
    allowances Map[Address]Map[Address]U256
    nextClaims Map[Address]I256
    
    yourPolicies Map[Address][]Policy
    // Map of FlightNo. => Departure Time => PNR No. => Policy
    policies Map[String]Map[U256]Map[String]Policy 
    // Map of FlightNo. => Departure Time => Delayed Time
    activePolicies U256 
    admin Address

// Keeping these as constants for now
const DEPARTURE_INTERVAL U256 = 7200

class Policy : 
    field holder Address
    field insuranceNumber String
    field Name String
    field claimStatus Bool
    field flightNo String
    field start String // Starting airport location
    field end String   // Ending airport location
    field premium U256
    field departureTime U256
    field pnrNo String
    field seatNo String
    field status U256 // 0 -> not updated, 1 -> on time, 2-> delayed 

endpoint deployer Init!(name String, symbol String, decimals U256, totalSupply U256):
    // For Token Initializations
    mutate name -> FlightInsurance.State.name
    mutate symbol -> FlightInsurance.State.symbol
    mutate decimals -> FlightInsurance.State.decimals
    mint!(account: Address(Sender), value: totalSupply)

    mutate Address(Sender) -> FlightInsurance.State.admin

///////////////////////
// FUNCTIONS
//////////////////////

func onlyAdmin():
    // Check if the address of the sender is address of the admin 
    observe admin <- FlightInsurance.State.admin:
        if(Address(Sender)!=admin):
            throw "Not Authorized"


func purchasePolicyChecks(flightNumber String, departureTime U256, pnrNumber String):
    var currentTime = U256(Env.Timestamp())

    if(departureTime > currentTime + DEPARTURE_INTERVAL): 
        throw "Policy should be bought 2 hours before departure time"

    observe policies <- FlightInsurance.State.policies:
        if policies[flightNumber][departureTime][pnrNumber]?:
            throw "Policy Already Exist"



func getPolicyPayout(MAX_CLAIM U256) -> (payout U256):
    // var claimAmt = totalFunds/activePolicies
    // if claimAmt > maxClaim ? return maxClaim
    
    // min(maxClaim amount, (totalFunds/activePolicies))
    var claimAmount U256
    observe balanceOf, activePolicies <- FlightInsurance.State.balanceOf, FlightInsurance.State.activePolicies:
        claimAmount = balanceOf[Address(FlightInsurance)]/activePolicies
    if(claimAmount > MAX_CLAIM):
        return (payout: MAX_CLAIM)
    return (payout: claimAmount)


///////////////////////
// Mutate/Write Endpoints
//////////////////////

endpoint invokable PurchasePolicy!(insuranceNo String, userName String, flightNumber String, startDestination String, endDestination String, premiumAmount U256, departureTime U256, pnrNumber String):

    var user = Address(Sender)
    purchasePolicyChecks(flightNumber, departureTime, pnrNumber)
    transfer!(from : user, to : Address(FlightInsurance), value : premiumAmount)
    var newPolicy = Policy{ holder: user, insuranceNumber : insuranceNo , Name : userName, claimStatus: false,flightNo: flightNumber, start : startDestination, end : endDestination, premium: premiumAmount, departureTime: departureTime, pnrNo: pnrNumber}
    mutate policies, activePolicies, yourPolicies <- FlightInsurance.State.policies, FlightInsurance.State.activePolicies, FlightInsurance.State.yourPolicies:
        
        policies[flightNumber][departureTime][pnrNumber] = newPolicy
        yourPolicies[user] = append(yourPolicies[user], newPolicy)
        activePolicies += 1


endpoint invokable ClaimPolicy!(flightNumber String, departureTime U256, pnrNumber String):

    var policyHolder = Address(Sender)
    var MAX_CLAIM U256
    
    observe policies <- FlightInsurance.State.policies:
        if(policies[flightNumber][departureTime][pnrNumber].claimStatus != false):
            throw "Policy Already Claimed"
        MAX_CLAIM = policies[flightNumber][departureTime][pnrNumber].premium * 10

    var payout U256 = getPolicyPayout(MAX_CLAIM)
    transfer!(from: Address(FlightInsurance), to: policyHolder, value: payout)

    mutate policies, activePolicies <- FlightInsurance.State.policies, FlightInsurance.State.activePolicies:
        policies[flightNumber][departureTime][pnrNumber].claimStatus = true
        activePolicies -= 1

endpoint invokable GetPolicy(account Address)->(userPolicies []Policy):
    observe yourPolicies <- FlightInsurance.State.yourPolicies:
        yield userPolicies yourPolicies[account]